<p>Introduction</p><p>When building applications with JavaScript, high performance and penetrability will always be at the crux of the decisions made by software developers.&nbsp;Svelte&nbsp;is a high-performance component framework for imperative code.</p><p>Svelte also brings a different way of scaffolding user interfaces to the table. While&nbsp;React&nbsp;and&nbsp;Vue&nbsp;perform most of their work in the browser, Svelte runs during build time by transforming the application’s component into code that updates the DOM.</p><p>This tutorial will cover the basics of Svelte and how you can harness its features to build high performance applications.</p><p>Step 1 — Building a Svelte Application</p><p>The first thing to do when building a Svelte application is to integrate Svelte with a project scaffolding tool. This tutorial will use&nbsp;degit.</p><p>Navigate to your terminal and run the following command to create a new directory for your application:</p><p> </p><p>npx degit sveltjs/template my-svelte-app</p><p> </p><p>Copy</p><p>Move into the new directory:</p><p> </p><p>cd my-svelte-app</p><p> </p><p>Copy</p><p>If you are using&nbsp;NPM, install the dependencies with the following command:</p><p> </p><p>npm install</p><p> </p><p>Copy</p><p>If you are using&nbsp;Yarn, install the dependencies with the following command:</p><p> </p><p>yarn install</p><p> </p><p>Copy</p><p>Run the following command to run a local development server where you can watch your application as you build:</p><p> </p><p>npm run dev</p><p> </p><p>Copy</p><p>This starts a server on&nbsp;http://localhost:5000.</p><p><img alt="Svelte project folder" src="https://scotch-res.cloudinary.com/image/upload/v1558627783/dcqnfzwar5mkszrwdu0u.png" class="card-img-top img-fluid" /></p><p>There are a couple of files in the project folder that were created during the scaffolding process. This tutorial will elaborate on the files which are the crux of the application:</p><p>package.json: This is where the packages the project will depend on are listed. It is worth noting that unlike React and Vue, Svelte’s&nbsp;package.json&nbsp;file lists only dev dependencies and none of the regular, standard dependencies you may be used to seeing in the two aforementioned frameworks. The reason is that the framework compiles your code to Vanilla JavaScript when building for production.</p><p>main.js: This is the entry point for all JavaScript in your application. Components are instantiated here.</p><p>App.svelte: This is your application’s first component. Similar to the way Vue components are created using the&nbsp;.vue&nbsp;extension. It contains all the logic, styling, and markup needed for a component to function.</p><p>index.html: During development, the&nbsp;public&nbsp;folder of your application will contain an unminified version of your application’s bundle.&nbsp;index.html&nbsp;is where that bundle is executed.</p><p>Step 2 — Creating a Svelte Component</p><p>Components are a basic of every Svelte application. They are written into&nbsp;.svelte&nbsp;files, using a superset of HTML. A&nbsp;.svelte&nbsp;file has two sections:</p><p>&lt;script&gt;: This section contains all the JavaScript and logic that runs the application.</p><p>&lt;style&gt;: This contains the CSS styles for the application. markup: This contains HTML markup, it’s similar to writing JSX in React.</p><p>The block of code below is an example of what a Svelte component looks like:</p><p>&lt;script&gt; let framework = 'Svelte'; &lt;/script&gt; &lt;style&gt; h1 { color: blue; font-family: 'Open Sans'; font-size: 2em; } &lt;/style&gt; &lt;h1&gt;This is a {framework} Component.&lt;/h1&gt; Result // This is a Svelte Component.</p><p> </p><p>Copy</p><p>Step 3 — Exploring Reactive Declarations</p><p>Svelte has a feature called&nbsp;<em>reactive declaration</em>. Most times when building an application, it gets a bit big. Parts of a component’s state will need to be called from other parts and recomputed if they change. This is exactly what reactive declarations are used for. Check out the code block below:</p><p>&lt;script&gt; let car = 'Mercedes'; $: carMakeSedan = car + ' E350'; $: carMakeSuv = car + ' G500'; &lt;/script&gt; &lt;p&gt; The {car} you want is a {carMakeSedan}.&lt;/p&gt; &lt;p&gt; If you would like something more expensive, go for the {carMakeSuv}.&lt;/p&gt; Result // The Mercedes you want is a Mercedes E350. // If you would like something more expensive, go for the Mercedes G500.</p><p> </p><p>Copy</p><p>Lines three and four tells Svelte to re-run this code whenever any of the referenced values change. A value should be relative when it needs to be referenced multiple times or if other values exist that depend on it.</p><p>Step 4 — Creating and Declaring Properties</p><p>When building an application, you will eventually need to pass data from component to component (also known as&nbsp;<em>parent to child</em>&nbsp;component). To do that, you need to declare properties with&nbsp;<em>props</em>. Svelte accomplishes this by using the&nbsp;export&nbsp;keyword. Check out the code sample below for an example:</p><p>// Car.svelte &lt;script&gt; export let carMake; &lt;/script&gt; &lt;p&gt;You ordered a {carMake}&lt;/p&gt;</p><p> </p><p>Copy</p><p>Navigate to the&nbsp;App.svelte&nbsp;parent component:</p><p>// App.svelte &lt;script&gt; import Mercedes from './Car.svelte'; import BMW from './Car.svelte'; import Jaguar from './Car.svelte'; &lt;/script&gt; &lt;Mercedes carMake={' Mercedes'}/&gt; &lt;BMW carMake={' BMW'}/&gt; &lt;Jaguar carMake={' Jaguar'}/&gt; // You ordered a Mercedes // You ordered a BMW // You ordered a Jaguar</p><p> </p><p>Copy</p><p>There is also an option to specify default values. In the&nbsp;Car.svelte&nbsp;example below, you can specify the default value for&nbsp;carMake:</p><p>//Car.svelte &lt;script&gt; export let carMake = 'Mercedes'; &lt;/script&gt; &lt;p&gt;You ordered a {carMake}&lt;/p&gt;</p><p> </p><p>Copy</p><p>Should you then fail to instantiate the component with&nbsp;carMake, it will revert to the default value:</p><p>//App.svelte &lt;script&gt; import Mercedes from './Car.svelte'; &lt;/script&gt; &lt;Mercedes carMake={' Mercedes'}/&gt; &lt;Mercedes /&gt; // You ordered a Mercedes // You ordered a Mercedes</p><p> </p><p>Copy</p><p>Step 5 — Exploring Logic and Binding</p><p>One particular trait of JSX in React is its inability to contain conditional statements. Most times where such logic is needed, it is usually substituted with ternary operators or some other workaround. Svelte has the ability to conditionally render markup by wrapping it in an&nbsp;if&nbsp;block. Check out the code sample below:</p><p> </p><p>&lt;script&gt; let luggage = { checkedIn: false }; function toggle() { luggage.checkedIn = !luggage.checkedIn; } &lt;/script&gt; {#if luggage.checkedIn} &lt;button on:click={toggle}&gt; Luggage is Checked Out &lt;/button&gt; {/if} {#if !luggage.checkedIn} &lt;button on:click={toggle}&gt; Luggage is Checked In &lt;/button&gt; {if}</p>